# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/nmi_mean"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 20

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: ${seed} # seed for random number generator
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.net.encoder.dropout: interval(0.1, 0.5)
      model.optimizer.lr: interval(0.0001, 0.001)
      model.optimizer.weight_decay: interval(0.0, 0.1)
      model.mm: interval(0.9, 0.99)
      model.warmup_steps: choice(100, 200, 300)
      #model.drop_edge_p1: interval(0.1, 0.4)
      #model.drop_edge_p2: interval(0.1, 0.4)
      #model.drop_feat_p1: interval(0.1, 0.4)
      #model.drop_feat_p2: interval(0.1, 0.4)
      model.mu: interval(0.1, 0.4)
      model.p_lambda: interval(0.4, 0.6)
      #model.p_rewire: interval(0.1, 0.4)
      #model.p_shuffle: interval(0.1, 0.4)
      model.spatial_noise_std: interval(0.005, 0.03)
      model.feature_noise_std: interval(0.1, 1.5)
      #model.p_add: interval(0.05, 0.2)
      #model.k_add: choice(1, 2, 3, 4, 5)
      model.spatial_regularization_strength: interval(0.0, 0.5)
