_target_: src.models.bgrl_phenotype_module.BGRLPhenotypeLitModule

mode: "pretraining"

net:
  _target_: src.models.components.bgrl.BGRL
  encoder:
    _target_: src.models.components.gnn.GNN
    num_layer: 3
    num_node_type: 30
    num_feat: 76
    emb_dim: 256
    node_embedding_output: "last"
    drop_ratio: 0.32
    gnn_type: "gin"
  projector:
    _target_: src.models.components.bgrl_projector.BGRLProjector
    input_size: ${pretrain.model.net.encoder.emb_dim}
    output_size: ${pretrain.model.net.encoder.emb_dim}
    hidden_size: 512

optimizer:
  _target_: torch.optim.AdamW
  _partial_: true
  lr: 0.006
  weight_decay: 0.02

scheduler:
  _target_: torch.optim.lr_scheduler.CosineAnnealingLR
  _partial_: true
  T_max: 20000
  eta_min: 1e-7

test_thresh: None # threshold for test set
compile: false # compile model for faster training with pytorch 2.0
augmentation_mode: "baseline" # augmetation mode, either baseline or advanced
augmentation_list1: [] # list of augmentations to apply for the first view (only necessary for advanced mode)
augmentation_list2: [] # list of augmentations to apply for the second view (only necessary for advanced mode)
mm: 0.97 # momentum for moving average of target encoder
warmup_steps: 2000 # number of warmup steps
total_steps: 50000 # total number of training steps
drop_edge_p1: 0. # drop edge probability for first augmentation
drop_edge_p2: 0. # drop edge probability for second augmentation
drop_feat_p1: 0. # drop feature probability for first augmentation
drop_feat_p2: 0. # drop feature probability for second augmentation
mu: 0. # hyperparameter for DropImportance
p_lambda: 0. # hyperparameter for DropImportance
p_rewire: 0. # rewiring probability for the graph augmentation
feature_noise_std: 0. # standard deviation of the feature noise augmentation
p_add: 0. # probability of adding new edges for the graph augmentation
k_add: 0 # number of new edges to add for the graph augmentation
p_shuffle: 0. # probability of shuffling nodes for the graph augmentation
seed: ${seed} # random seed for reproducibility
